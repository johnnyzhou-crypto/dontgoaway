Thinking In Go
Sep 2022

Johnny Zhou
johnny.zhou@crypto.com
https://crypto.com/


* Introduction
Goroutine
Channel
WaitGroup
web

* Background
.image code/images/singleProcess.png _ 600


* What issues?
Single process
Time issues


* Can we using multiple processes?
.image code/images/MultiProcess.png _ 600


* There is another issue
.image code/images/timecause.png _ 600


* Goroutine
what is goroutine

* Channel
buffered channel
unbuffered channel

* buffered channel
.image code/images/unbuffered-channel.png _ 600

* unbuffered channel
.image code/images/buffered-channel.png _ 600


* How to define a channel
c := make(chan int) // unbuffered
c := make(chan int, 1024)
for i:=range c {
　　...
}

* How to define a channel
data := <- a   // read data from channel a
a <- data      // write data to channel a

* A simple channel demo
.play -edit code/chan/simpleChannel2.go /START_OMIT/,/END_OMIT/

* WaitGroup
what is WaitGroup
Golang中sync包中的WaitGroup实现的功能与CountDownLatch类似，主线程需要等待其他协程处理完所有任务之后才能继续向下执行

- 在Go语言中模拟面向对象的行为

* Function & Receiver

读取struct信息.

.play -edit code/chan/test_chan.go /START_OMIT/,/END_OMIT/

This is a runnable program, press the *run* button in the bottom corner.

* Function & Receiver

修改struct信息
